.data
matrix: .space  10000
str_enter:  .asciiz "\n"
str_space:  .asciiz " "

.macro  getindex(%ans, %i, %j)
    sll %ans, %i, 3             # %ans = %i * 8
    add %ans, %ans, %j          # %ans = %ans + %j
    sll %ans, %ans, 2           # %ans = %ans * 4
.end_macro

.text
li  $v0, 5
syscall
move $s0, $v0                   
li  $v0, 5
syscall
move $s1, $v0                   

li  $t0, 0                      #i_cycle_1
in_i:                           
beq $t0, $s0, in_i_end          #i_cycle_2
li  $t1, 0                      #j_cycle_1
in_j:                           
beq $t1, $s1, in_j_end          #j_cycle_2
li  $v0, 5
syscall                         #input
getindex($t2, $t0, $t1)         #($t0 * 8 + $t1) * 4
sw  $v0, matrix($t2)            # matrix[$t0][$t1] = $v0
addi $t1, $t1, 1                #j_cycle_3
j   in_j
in_j_end:
addi $t0, $t0, 1                #i_cycle_3
j   in_i
in_i_end:
                                #matrix[i][j](0<=i<s0,0<=j<s1)
addi $t0,$s0,-1                 

out_i:
beq $t0, -1, out_i_end          
addi $t1,$s1,-1                 

out_j:
beq $t1, -1, out_j_end          
getindex($t2, $t0, $t1)
lw  $a0, matrix($t2)            # $a0 = matrix[$t0][$t1]
beq $a0, $zero, skip            
addi $a0, $t0, 1                #output:t0+1
li  $v0, 1
syscall
la  $a0, str_space              #output:" "
li  $v0, 4
syscall
addi $a0, $t1, 1                #output:t1+1
li  $v0, 1
syscall
la  $a0, str_space              #output:" "
li  $v0, 4
syscall
lw  $a0, matrix($t2)            #output:matrix[$t0][$t1]
li  $v0, 1
syscall
la  $a0, str_enter              #output:"\n"
li  $v0, 4
syscall 

skip:                           
addi $t1, $t1, -1               
j   out_j

out_j_end:                      
addi $t0, $t0, -1               
j   out_i                       

out_i_end:
li  $v0, 10
syscall
